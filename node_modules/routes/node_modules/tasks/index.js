(function(){
	'use strict';

	var tasks = require('express').Router();
	var pg = require('pg');

	tasks
	// GET all tasks
	.get('/', function (request, response) {
		console.log('Request:\n', request.body);
		console.log('Response:\n', response.body);
		if (!request.params.id) {
			console.log('User session not found');
			response.status(401).end();
		} else {
			// Соединяемся с БД...
			pg.connect(function (err, client) {
				if (err) {
					// Если есть ошибка соединения с БД, выводим в консоль и отправляем статус 500 (ошибка сервера)
					// TODO Добавить журналирование
					console.error('GET all tasks:\n', err);
					response.status(500).end();
				} else {
					// Отправляем запрос в БД...
					client.query({
						text: 'SELECT id, task_name, task_description, create_date FROM open_project.e_tasks WHERE is_deleted = 0 ORDER BY id'
					}, function(err, result){
						if (err) {
							// Если есть ошибка при выполнения запроса, выводим в консоль и отправляем статус 500 (ошибка сервера)
							console.error('SELECT all tasks:\n', err);
							response.status(500).end();
						} else {
							// Если ошибок нет, приводим идентификаторы свойств объекта к camelCase для клиента
							var retval = [];
							for(var i = 0, len = result.rows.length; i < len; i++){
								retval.push({
									id: result.rows[i].id,
									taskName: result.rows[i].task_name,
									taskDescription: result.rows[i].task_description,
									createDate: result.rows[i].create_date
								})
							}
							// Закрываем соединение с БД...
							client.end();
							// Отправляем данные клиенту
							response.status(200).json(retval).end();
						}
					})
				}
			})
		}
	})
	// POST new task
	.post('/', function (request, response) {
		// Проверяем на наличие данных для добавления в БД...
		// Если данных нет, отправляем статус 400 (ошибка клиента)
		if(!request.body.taskName){
			console.error(request.body);
			response.status(400).end();
			return;
		} else {
			// Если данные есть, соединяемся с БД...
			pg.connect(function(err, client){
				// Если ошибка соединения с базой, то отправляем статус 500 (ошибка сервера)
				if(err){
					console.error('POST new task:\n', err);
					response.status(500).end();
					return;
				} else {
					// Если ошибки соединения с БД нет, создаем объект и записываем в него данные
					var task = {
						taskName: request.body.taskName,
						taskDescription: request.body.taskDescription
					}
					// Проверяем есть ли в БД задача с таким наименованием...
					client.query({
						text: 'SELECT id FROM open_project.e_tasks WHERE task_name = $1',
						values: [task.taskName]
					}, function(err, result){
						if(err){
							// Если ошибка выполнения запроса в БД, то отправляем статус 500 (ошибка сервера)
							console.error('SELECT task_name', err);
							response.status(500).end();
							return;
						} else {
							// Если ошибки выполнения запроса нет, проверяем результаты запроса...
							// Если количество возвращенных строк равно 1, значит запись с таким наименованием задачи есть, отправляем статус 400 (ошибка клиента)
							if (Number(result['rowCount'] === 1)) {
								console.error('Duplicate');
								response.status(400).end();
								return;
							} else {
								// Если количество возвращенных строк равно 0, значит записи с таким наименованием задачи нет
								if(Number(result['rowCount'] === 0)){
									// Выполняем вставку записи в БД...
									client.query({
										text: 'INSERT INTO open_project.e_tasks (task_name, task_description) VALUES ($1, $2) RETURNING id',
										values: [
											task.taskName,
											task.taskDescription
										]
									}, function(err, result){
										if(err){
											if(Number(err.code) === 23505){
												// Если есть ошибка 23505 (duplicate) при вставке данных, отправляем статус 400 (ошибка клиента)
												console.error('Duplicate:\n', task.taskName);
												response.status(400).end();
												return;
											} else {
												// Если есть ошибка при вставке данных, выводим данные в консоль и отправляем статус 500 (ошибка сервера)
												console.error('INSERT task:\n', err);
												response.status(500).end();
												return;
											}
										} else {
											// Если ошибки нет, закрываем соединение с БД
											client.end();
											// Отправляем данные клиенту
											response.status(200).json(result.rows[0]).end();
											return;
										}
									})
								}
							}
						}
					})
				}
			})
		}
	})
	// PUT task
	.put('/:id', function (request, response) {
		if(!request.params.id){
			console.error('Task id not found:\n', request.body);
			response.status(400).end();
			return;
		} else {
			pg.connect(function (err, client) {
				if (err) {
					console.error('PUT task:\n', err);
					response.status(500).end();
				} else {
					var task = {
						id: request.params.id,
						taskName: request.body.taskName,
						taskDescription: request.body.taskDescription
					}
					client.query({
						text: 'SELECT id FROM open_project.e_tasks WHERE task_name = $1',
						values: [task.taskName]
					}, function (err, result) {
						if (err) {
							console.error('SELECT taskName:\n', err);
							response.status(500).end();
							return;
						} else {
							if (Number(result.rowCount) === 1) {
								console.error('Duplicate task name');
								response.status(400).end();
								return;
							} else {
								client.query({
									text: 'INSERT INTO open_project.e_tasks (task_name, task_description) VALUES ($1, $2) RETURNING id',
									values: [
										task.taskName,
										task.taskDescription
									]
								}, function(err, result){
									if(err){
										console.error('INSERT task:\n', err);
										response.status(500).end();
										return;
									} else {
										if (Number(result.rowCount) === 0) {
											console.error('INSERT task:\n');
											response.status(500).end();
											return;
										} else {
											client.query({
												text: 'UPDATE open_project.e_tasks SET is_deleted = 1 where id = $1',
												values: [result.rows[0].id]
											}, function(err, result){
												if (err) {
													console.error('UPDATE task:\n', err);
													response.status(500).end();
													return;
												} else {
													client.end();
													response.status(200).end();
													return;
												}
											})
										}
									}
								})
							}
						}
					})
				}
			})
		}
	})
	// DELETE task
	.delete('/:id', function (request, response) {
		if (!request.params.id) {
			console.error('Task id not found');
			response.status(400).end();
			return;
		} else {
			pg.connect(function (err, client) {
				if (err) {
					console.error('DELETE task:\n', err);
					response.status(500).end();
					return;
				} else {
					var task = {
						id: Number(request.params.id)
					}
					client.query({
						text: 'UPDATE open_project.e_tasks SET is_deleted = 1, delete_date = (\'now()\') WHERE id = $1',
						values: [task.id]
					}, function (err, result) {
						if (err) {
							console.error('DELETE task:\n', err);
							response.status(500).end();
						} else {
							if (!(Number(result.rowCount) === 1)) {
								console.error('DELETE task:\n', result);
								response.status(500).end();
								return;
							} else {
								client.end();
								console.log(result.rowCount);
								response.status(200).end();
								return;
							}
						}
					})
				}
			})
		}
	});

	module.exports = tasks;
})();